# -*- coding: utf-8 -*-
"""合併6/30～7/4的股票資料.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RDpp0pAfcdrHUxTJz_osS89BOJHZ_KP5
"""

import requests
import csv
from io import StringIO
from collections import OrderedDict, Counter

class SimpleDF:
    def __init__(self, columns, rows):
        self.columns = columns
        self.rows = rows  # list of dicts：{col: val}
    def info(self):
        total = len(self.rows)
        print(f"<class 'SimpleDF'>")
        print(f"RangeIndex: {total} entries, 0 to {total-1}")
        print(f"Data columns (total {len(self.columns)} columns):")
        non_null = {col:0 for col in self.columns}
        dtype_counter = Counter()
        for row in self.rows:
            for col in self.columns:
                val = row.get(col, "").strip()
                if val:
                    non_null[col] += 1
        # 推測 dtype：簡單判定 numeric or object
        for col in self.columns:
            sample = next((r[col] for r in self.rows if r[col].strip()), "")
            dtype = "float64" if sample.replace('.','',1).isdigit() else "object"
            dtype_counter[dtype] +=1
        for idx, col in enumerate(self.columns):
            print(f" {idx:>3} {col:<15} {non_null[col]:>10} non-null  {('float64' if any(self.rows and row[col].strip() and row[col].replace('.','',1).isdigit() for row in self.rows) else 'object')}")
        print(f"dtypes: " + ", ".join(f"{dt}({cnt})" for dt,cnt in dtype_counter.items()))

# 抓取並解析 CSV
dates = ["20250630","20250701","20250702","20250703","20250704"]
base = "https://www.twse.com.tw/rwd/zh/afterTrading/MI_INDEX?date={}&type=ALL&response=csv"

all_rows = []
columns = None

for d in dates:
    r = requests.get(base.format(d))
    r.encoding = 'big5'
    text = StringIO(r.text)
    reader = csv.reader(text)
    rows = list(reader)
    for i,row in enumerate(rows):
        if row and row[0].strip()=="證券代號":
            cols = row
            data = rows[i+1:]
            break
    if columns is None:
        columns = cols
    for r in data:
        if len(r)==len(columns) and any(c.strip() for c in r):
            all_rows.append(dict(zip(columns, r)))

# 建立 DataFrame 類別，並印出 info()
df = SimpleDF(columns, all_rows)
df.info()

"""test_1"""

import requests
import csv
from io import StringIO

class SimpleDF:
    def __init__(self, columns, rows):
        self.columns = columns
        self.rows = rows  # list of dict

    def info(self):
        total = len(self.rows)
        print(f"<class 'SimpleDF'>")
        print(f"RangeIndex: {total} entries, 0 to {total-1}")
        print(f"Data columns (total {len(self.columns)} columns):")
        non_null = {c: 0 for c in self.columns}
        for r in self.rows:
            for c, v in r.items():
                if v.strip():
                    non_null[c] += 1
        # 簡易 dtype 判斷：有小數或整數判 float64，否則 object
        types = {}
        for c in self.columns:
            sample = next((r[c] for r in self.rows if r[c].strip()), "")
            types[c] = "float64" if sample.replace('.', '', 1).isdigit() else "object"
        for i, c in enumerate(self.columns):
            print(f" {i:>3} {c:<15} {non_null[c]:>10} non-null  {types[c]}")

# 下載並解析 CSV 資料
dates = ["20250630","20250701","20250702","20250703","20250704"]
base = "https://www.twse.com.tw/rwd/zh/afterTrading/MI_INDEX?date={}&type=ALL&response=csv"

columns = None
all_rows = []

for d in dates:
    resp = requests.get(base.format(d))
    resp.encoding = 'big5'
    reader = csv.reader(StringIO(resp.text))
    rows = list(reader)
    for idx, row in enumerate(rows):
        if row and row[0].strip() == "證券代號":
            cols = row
            data = rows[idx+1:]
            break
    if columns is None:
        columns = cols
    for r in data:
        if len(r) == len(columns) and any(cell.strip() for cell in r):
            all_rows.append(dict(zip(columns, r)))

# 建立 DataFrame 並顯示資料資訊
df = SimpleDF(columns, all_rows)
df.info()

"""test_2"""

import requests
import csv
from io import StringIO
import pandas as pd

# 📥 下載原始 CSV
def download_twse_csv(date: str, type_: str = "ALL") -> str:
    url = f"https://www.twse.com.tw/rwd/zh/afterTrading/MI_INDEX?date={date}&type={type_}&response=csv"
    response = requests.get(url)
    response.encoding = 'cp950'  # or 'big5'
    if response.status_code != 200:
        raise Exception(f"下載失敗: {response.status_code}")
    print(f"✅ {date} 下載完成")
    return response.text

# 📃 清理內容
def extract_csv_lines(raw_text: str) -> list:
    lines = [line.strip() for line in raw_text.split('\n') if line.strip() and ',' in line]
    return lines

# 🔍 找到表頭和資料行
def find_data_section(lines: list, keyword: str = "證券代號") -> (str, list):
    header_idx = None
    for idx, line in enumerate(lines):
        if keyword in line:
            header_idx = idx
            break
    if header_idx is None:
        raise Exception("找不到表頭")
    header_line = lines[header_idx]
    data_lines = lines[header_idx + 1:]
    return header_line, data_lines

# 🧹 整理成 DataFrame
def clean_data(header_line: str, data_lines: list) -> pd.DataFrame:
    header = next(csv.reader([header_line]))
    rows = list(csv.reader(data_lines))
    cleaned_rows = []
    for row in rows:
        cleaned_row = [
            cell.replace('="', '').replace('"', '').strip()
            if cell.startswith('="') else cell.replace('"', '').strip()
            for cell in row
        ]
        if len(cleaned_row) == len(header):  # 避免長度不一致
            cleaned_rows.append(cleaned_row)
    df = pd.DataFrame(cleaned_rows, columns=header)
    return df

# 📅 日期清單
dates = ["20250630", "20250701", "20250702", "20250703", "20250704"]

# 📊 合併多天資料
df_all = pd.DataFrame()
for date in dates:
    raw_text = download_twse_csv(date)
    lines = extract_csv_lines(raw_text)
    header_line, data_lines = find_data_section(lines)
    df = clean_data(header_line, data_lines)
    df["日期"] = date  # 加上日期欄
    df_all = pd.concat([df_all, df], ignore_index=True)

# 🧾 顯示 DataFrame 資訊
print("\n📋 合併後的 df_all.info():")
df_all.info()

"""I think is right. final_1"""